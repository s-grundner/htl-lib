
Ringbuffer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000296  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800108  00800108  00000332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e1  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000893  00000000  00000000  00000ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000417  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000452  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018f  00000000  00000000  00001f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000212d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e9       	ldi	r30, 0x96	; 150
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 30       	cpi	r26, 0x08	; 8
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a8 e0       	ldi	r26, 0x08	; 8
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a0 32       	cpi	r26, 0x20	; 32
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
#include <avr/common.h>
#include "ringbuffer.h"

int main(void)
{
	sei();
  ba:	78 94       	sei
	init_ringbuffer();
  bc:	0e 94 82 00 	call	0x104	; 0x104 <init_ringbuffer>
	init_usart();
  c0:	0e 94 71 00 	call	0xe2	; 0xe2 <init_usart>
	char * txt = "Thomas";
	while(1)
	{
		send_serial_data(txt, 6);
  c4:	66 e0       	ldi	r22, 0x06	; 6
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 8d 00 	call	0x11a	; 0x11a <send_serial_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x1a>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x24>
  de:	00 00       	nop
  e0:	f1 cf       	rjmp	.-30     	; 0xc4 <main+0xa>

000000e2 <init_usart>:

unsigned char ringbuffer[RINGBUFFERSIZE], *p_read, *p_write;

void init_usart(void)
{
    UBRR0 = 51; // 19200 baud
  e2:	83 e3       	ldi	r24, 0x33	; 51
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
  ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    UCSR0B |= ((1<<RXEN0)|(1<<TXEN0)); // enable transmitter + reciever
  ee:	e1 ec       	ldi	r30, 0xC1	; 193
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 61       	ori	r24, 0x18	; 24
  f6:	80 83       	st	Z, r24
    UCSR0C |= ((1<<UCSZ01)|(1<<USBS0)); // 8 data + 1 stopbit
  f8:	e2 ec       	ldi	r30, 0xC2	; 194
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8c 60       	ori	r24, 0x0C	; 12
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <init_ringbuffer>:
}

void init_ringbuffer(void)
{
	p_read = p_write = ringbuffer;
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 10c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 110:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <p_read+0x1>
 114:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <p_read>
 118:	08 95       	ret

0000011a <send_serial_data>:
}

char send_serial_data(char* serial_data, char len)
{
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
	
	// [!] Critical Section
	// ------------------------------------------------------------
	{
		unsigned char c_sreg;
		c_sreg = SREG;
 124:	4f b7       	in	r20, 0x3f	; 63
		cli();
 126:	f8 94       	cli
		free_size = (p_write >= p_read) ? (RINGBUFFERSIZE - (int) p_write + (int) p_read - 1) : ((int) p_read + (int) p_write - 1);
 128:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 12c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 130:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <p_read>
 134:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <p_read+0x1>
 138:	82 17       	cp	r24, r18
 13a:	93 07       	cpc	r25, r19
 13c:	50 f0       	brcs	.+20     	; 0x152 <send_serial_data+0x38>
 13e:	e4 e1       	ldi	r30, 0x14	; 20
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	df 01       	movw	r26, r30
 144:	a8 1b       	sub	r26, r24
 146:	b9 0b       	sbc	r27, r25
 148:	cd 01       	movw	r24, r26
 14a:	82 0f       	add	r24, r18
 14c:	93 1f       	adc	r25, r19
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	03 c0       	rjmp	.+6      	; 0x158 <send_serial_data+0x3e>
 152:	82 0f       	add	r24, r18
 154:	93 1f       	adc	r25, r19
 156:	01 97       	sbiw	r24, 0x01	; 1
		SREG = c_sreg;
 158:	4f bf       	out	0x3f, r20	; 63
	}
	// ------------------------------------------------------------
	// [!] Leave Critical Section
	
	if(len > free_size) return -1;
 15a:	06 2f       	mov	r16, r22
 15c:	10 e0       	ldi	r17, 0x00	; 0
 15e:	80 17       	cp	r24, r16
 160:	91 07       	cpc	r25, r17
 162:	4c f1       	brlt	.+82     	; 0x1b6 <send_serial_data+0x9c>
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	1c c0       	rjmp	.+56     	; 0x1a2 <send_serial_data+0x88>
	for (int i = 0; i < len; i++)
	{
		*p_write = serial_data[i];
 16a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end>
 16e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x1>
 172:	ce 01       	movw	r24, r28
 174:	82 0f       	add	r24, r18
 176:	93 1f       	adc	r25, r19
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	8c 93       	st	X, r24
// 		p_write++;
// 		if (p_write >= &ringbuffer[RINGBUFFERSIZE])
// 		{
// 			p_write = ringbuffer;
// 		}
		p_write = ringbuffer + 1 + (p_write - ringbuffer)%RINGBUFFERSIZE;
 17e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 182:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 186:	8c 50       	subi	r24, 0x0C	; 12
 188:	91 40       	sbci	r25, 0x01	; 1
 18a:	64 e1       	ldi	r22, 0x14	; 20
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	0e 94 21 01 	call	0x242	; 0x242 <__divmodhi4>
 192:	83 5f       	subi	r24, 0xF3	; 243
 194:	9e 4f       	sbci	r25, 0xFE	; 254
 196:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 19a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	}
	// ------------------------------------------------------------
	// [!] Leave Critical Section
	
	if(len > free_size) return -1;
	for (int i = 0; i < len; i++)
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	20 17       	cp	r18, r16
 1a4:	31 07       	cpc	r19, r17
 1a6:	0c f3       	brlt	.-62     	; 0x16a <send_serial_data+0x50>
// 		{
// 			p_write = ringbuffer;
// 		}
		p_write = ringbuffer + 1 + (p_write - ringbuffer)%RINGBUFFERSIZE;
	}
	UCSR0B |= (1<<UDRIE0);
 1a8:	e1 ec       	ldi	r30, 0xC1	; 193
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	80 83       	st	Z, r24
	return 0;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <send_serial_data+0x9e>
		SREG = c_sreg;
	}
	// ------------------------------------------------------------
	// [!] Leave Critical Section
	
	if(len > free_size) return -1;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
// 		}
		p_write = ringbuffer + 1 + (p_write - ringbuffer)%RINGBUFFERSIZE;
	}
	UCSR0B |= (1<<UDRIE0);
	return 0;
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <__vector_21>:

ISR(USART0_UDRE_vect)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	if (p_read == p_write)
 1de:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <p_read>
 1e2:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <p_read+0x1>
 1e6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1ea:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 1ee:	e8 17       	cp	r30, r24
 1f0:	f9 07       	cpc	r31, r25
 1f2:	31 f4       	brne	.+12     	; 0x200 <__vector_21+0x3e>
	{
		// Exit ISR & Disable UDR Empty Interrupt
		UCSR0B &= ~(1<<UDRIE0);
 1f4:	e1 ec       	ldi	r30, 0xC1	; 193
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	8f 7d       	andi	r24, 0xDF	; 223
 1fc:	80 83       	st	Z, r24
		return;
 1fe:	13 c0       	rjmp	.+38     	; 0x226 <__vector_21+0x64>
	}
	UDR0 = *p_read;
 200:	80 81       	ld	r24, Z
 202:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
// 	if (p_read >= &ringbuffer[RINGBUFFERSIZE])
// 	{
// 		// pointer set to ringbuffer start
// 		p_read = ringbuffer;
// 	}
	p_read = ringbuffer + 1 + (p_read - ringbuffer)%RINGBUFFERSIZE;
 206:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <p_read>
 20a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <p_read+0x1>
 20e:	8c 50       	subi	r24, 0x0C	; 12
 210:	91 40       	sbci	r25, 0x01	; 1
 212:	64 e1       	ldi	r22, 0x14	; 20
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	0e 94 21 01 	call	0x242	; 0x242 <__divmodhi4>
 21a:	83 5f       	subi	r24, 0xF3	; 243
 21c:	9e 4f       	sbci	r25, 0xFE	; 254
 21e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <p_read+0x1>
 222:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <p_read>
	return;
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <__divmodhi4>:
 242:	97 fb       	bst	r25, 7
 244:	07 2e       	mov	r0, r23
 246:	16 f4       	brtc	.+4      	; 0x24c <__divmodhi4+0xa>
 248:	00 94       	com	r0
 24a:	07 d0       	rcall	.+14     	; 0x25a <__divmodhi4_neg1>
 24c:	77 fd       	sbrc	r23, 7
 24e:	09 d0       	rcall	.+18     	; 0x262 <__divmodhi4_neg2>
 250:	0e 94 35 01 	call	0x26a	; 0x26a <__udivmodhi4>
 254:	07 fc       	sbrc	r0, 7
 256:	05 d0       	rcall	.+10     	; 0x262 <__divmodhi4_neg2>
 258:	3e f4       	brtc	.+14     	; 0x268 <__divmodhi4_exit>

0000025a <__divmodhi4_neg1>:
 25a:	90 95       	com	r25
 25c:	81 95       	neg	r24
 25e:	9f 4f       	sbci	r25, 0xFF	; 255
 260:	08 95       	ret

00000262 <__divmodhi4_neg2>:
 262:	70 95       	com	r23
 264:	61 95       	neg	r22
 266:	7f 4f       	sbci	r23, 0xFF	; 255

00000268 <__divmodhi4_exit>:
 268:	08 95       	ret

0000026a <__udivmodhi4>:
 26a:	aa 1b       	sub	r26, r26
 26c:	bb 1b       	sub	r27, r27
 26e:	51 e1       	ldi	r21, 0x11	; 17
 270:	07 c0       	rjmp	.+14     	; 0x280 <__udivmodhi4_ep>

00000272 <__udivmodhi4_loop>:
 272:	aa 1f       	adc	r26, r26
 274:	bb 1f       	adc	r27, r27
 276:	a6 17       	cp	r26, r22
 278:	b7 07       	cpc	r27, r23
 27a:	10 f0       	brcs	.+4      	; 0x280 <__udivmodhi4_ep>
 27c:	a6 1b       	sub	r26, r22
 27e:	b7 0b       	sbc	r27, r23

00000280 <__udivmodhi4_ep>:
 280:	88 1f       	adc	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	5a 95       	dec	r21
 286:	a9 f7       	brne	.-22     	; 0x272 <__udivmodhi4_loop>
 288:	80 95       	com	r24
 28a:	90 95       	com	r25
 28c:	bc 01       	movw	r22, r24
 28e:	cd 01       	movw	r24, r26
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
